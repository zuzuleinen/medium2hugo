])}while(1);</x>{"success":true,"payload":{"value":{"id":"e7bb68cd5608","versionId":"4aa328419384","creatorId":"85628b4ce9c1","homeCollectionId":"","title":"Fundamentals of I/O in Go: Part 2","detectedLanguage":"en","latestVersion":"4aa328419384","latestPublishedVersion":"4aa328419384","hasUnpublishedEdits":false,"latestRev":1317,"createdAt":1712589986667,"updatedAt":1712834757442,"acceptedAt":0,"firstPublishedAt":1712761335230,"latestPublishedAt":1712763805029,"vote":false,"experimentalCss":"","displayAuthor":"","content":{"subtitle":"It's time to continue exploring the fundamentals of I/O in Go.","bodyModel":{"paragraphs":[{"name":"3f00","type":3,"text":"Fundamentals of I/O in Go: Part 2","markups":[]},{"name":"93e4","type":1,"text":"It's time to continue exploring the fundamentals of I/O in Go.","markups":[]},{"name":"7194","type":1,"text":"If you’re not familiar with io.Reader and io.Writer in Go, read my first article, especially the part where I said that a Reader is something we can read from, and a Writer is something we can write to.","markups":[{"type":3,"start":64,"end":80,"href":"https://medium.com/@andreiboar/fundamentals-of-i-o-in-go-c893d3714deb","title":"","rel":"","anchorType":0}]},{"name":"41c8","type":1,"text":"Let's see what else is out there and show you some awesome functions.","markups":[]},{"name":"8a47","type":3,"text":"io.LimitReader","markups":[]},{"name":"5c1b","type":4,"text":"","markups":[],"layout":1,"metadata":{"id":"1*-KZONqGNNwqPJ4Bmf70o-Q.png","originalWidth":254,"originalHeight":97}},{"name":"68d2","type":1,"text":"Sometimes, you want to limit the number of bytes you read from a piece of data.","markups":[]},{"name":"2103","type":1,"text":"To limit the size of data you read, you can wrap that data source (Reader) with an io.LimitReader function that returns another Reader from which you can read only n bytes:","markups":[{"type":10,"start":164,"end":165},{"type":3,"start":83,"end":97,"href":"https://pkg.go.dev/io#LimitReader","title":"","rel":"noopener","anchorType":0}]},{"name":"5a02","type":8,"text":"package main\n\nimport (\n    \"io\"\n    \"log\"\n    \"os\"\n    \"strings\"\n)\n\nfunc main() {\n    r := strings.NewReader(\"Hello!\")\n\n    lr := io.LimitReader(r, 4)\n\n    // Ouput: Hell\n    if _, err := io.Copy(os.Stdout, lr); err != nil {\n        log.Fatal(err)\n    }\n}","markups":[],"codeBlockMetadata":{"mode":1,"lang":"go"}},{"name":"c956","type":1,"text":"run in Playground","markups":[{"type":3,"start":0,"end":17,"href":"https://go.dev/play/p/1GYziqBeupc","title":"","rel":"","anchorType":0}]},{"name":"45c2","type":1,"text":"The above code outputs Hell. The limited reader lr can be passed into any function expecting a Reader and will work as expected: only 4 bytes will be read from it.","markups":[{"type":10,"start":23,"end":27},{"type":10,"start":48,"end":50}]},{"name":"ccee","type":3,"text":"io.MultiReader","markups":[]},{"name":"f110","type":4,"text":"","markups":[],"layout":1,"metadata":{"id":"1*M7AlXdGEfds9uD8fgkU6qw.png","originalWidth":259,"originalHeight":244}},{"name":"0bcc","type":1,"text":"Sometimes, you can have multiple data sources, and you want to treat those sources as one. If you have multiple Readers, you can merge them into one Reader with io.MultiReader:","markups":[{"type":3,"start":161,"end":175,"href":"https://pkg.go.dev/io#MultiReader","title":"","rel":"","anchorType":0}]},{"name":"313f","type":8,"text":"package main\n\nimport (\n    \"io\"\n    \"log\"\n    \"os\"\n    \"strings\"\n)\n\nfunc main() {\n    r1 := strings.NewReader(\"first reader\\n\")\n    r2 := strings.NewReader(\"second reader\\n\")\n    r3 := strings.NewReader(\"third reader\\n\")\n\n    // merge all 3 readers into one\n    r := io.MultiReader(r1, r2, r3)\n\n    if _, err := io.Copy(os.Stdout, r); err != nil {\n       log.Fatal(err)\n    }\n\n}","markups":[],"codeBlockMetadata":{"mode":1,"lang":"go"}},{"name":"f56d","type":1,"text":"run in Playground","markups":[{"type":3,"start":0,"end":17,"href":"https://go.dev/play/p/qrXFNukv11n","title":"","rel":"","anchorType":0}]},{"name":"411b","type":1,"text":"In the above example, we merge all three readers intor, and when we read to os.Stdout from r, it's as if we copy sequentially from each reader.","markups":[{"type":10,"start":53,"end":54},{"type":10,"start":76,"end":85},{"type":10,"start":91,"end":92}]},{"name":"350d","type":1,"text":"I recently used io.MultiReader, when I needed to write the bytes coming from different requests into one file in a parallel downloader implementation:","markups":[{"type":3,"start":115,"end":149,"href":"https://github.com/zuzuleinen/downloader/blob/main/downloader/downloader.go#L118","title":"","rel":"noopener","anchorType":0}]},{"name":"1055","type":8,"text":" results := make([]io.Reader, n)\n // ...\n if err := writeToFile(destinationFileName, io.MultiReader(results...)); err != nil {\n  return fmt.Errorf(\"could not write to file: %w\", err)\n }","markups":[],"codeBlockMetadata":{"mode":1,"lang":"go"}},{"name":"2150","type":3,"text":"io.MultiWriter","markups":[]},{"name":"1bec","type":4,"text":"","markups":[],"layout":1,"metadata":{"id":"1*WPw5kYw_1aq8d1qiVW0uRg.png","originalWidth":257,"originalHeight":244,"isFeatured":true}},{"name":"9517","type":1,"text":"Similar to io.MultiReader, we have an io.MultiWriter function, which creates a writer that reproduces its writes to all the provided writers:","markups":[{"type":3,"start":38,"end":52,"href":"https://pkg.go.dev/io#MultiWriter","title":"","rel":"","anchorType":0}]},{"name":"64b5","type":8,"text":"package main\n\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"io\"\n    \"strings\"\n)\n\nfunc main() {\n    var (\n       buf1 bytes.Buffer\n       buf2 bytes.Buffer\n    )\n\n    // writing into mw will write to both buf1 and buf2\n    mw := io.MultiWriter(&buf1, &buf2)\n\n    // r is the source of data(Reader)\n    r := strings.NewReader(\"some io.Reader stream to be read\")\n\n    // write to mw from r\n    io.Copy(mw, r)\n\n    fmt.Println(\"data inside buffer1 :\", buf1.String())\n    fmt.Println(\"data inside buffer2 :\", buf2.String())\n\n}","markups":[],"codeBlockMetadata":{"mode":1,"lang":"go"}},{"name":"a156","type":1,"text":"run in Playround","markups":[{"type":3,"start":0,"end":16,"href":"https://go.dev/play/p/pgGn2NO95Qc","title":"","rel":"","anchorType":0}]},{"name":"8b41","type":1,"text":"I like to useio.MultiWriter when I'm trying to debug what was written in a certain Writer. \nIf a function writes to a Writer and, for some reason, it is too hard to get those contents, I connect a bytes.Buffer to it, and then I check the contents of the buffer, which will be the same as the contents of my inaccessible Writer:","markups":[{"type":10,"start":13,"end":27},{"type":10,"start":197,"end":209}]},{"name":"6aae","type":8,"text":"package main\n\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"io\"\n)\n\nfunc main() {\n    buf := new(bytes.Buffer)\n\n    debug := io.MultiWriter(buf, weirdWriter) // attach buf to weirdWriter\n\n    complicatedFunctionWithAWriter(weirdWriter)\n\n    // The contents of the buffer will be the same as in weirdWriter\n    fmt.Println(buf.String())\n    fmt.Println(buf.Bytes())\n\n}","markups":[],"codeBlockMetadata":{"mode":1,"lang":"go"}},{"name":"34e6","type":3,"text":"io.TeeReader","markups":[]},{"name":"c6b3","type":4,"text":"","markups":[],"layout":1,"metadata":{"id":"1*7HqA96t-RS1q7-c0B8k8PA.png","originalWidth":889,"originalHeight":352}},{"name":"dc0f","type":1,"text":"Imagine reading and writing data in a place, and you want to write the same data somewhere else.","markups":[]},{"name":"8d38","type":1,"text":"In the above image, we read from R to W and write to an extra Logs Writer at the same time.","markups":[{"type":10,"start":33,"end":34},{"type":10,"start":37,"end":39},{"type":10,"start":62,"end":66}]},{"name":"394e","type":1,"text":"Let’s see how that looks in code:","markups":[]},{"name":"db62","type":8,"text":"package main\n\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"io\"\n    \"os\"\n    \"strings\"\n)\n\nfunc main() {\n    logs := new(bytes.Buffer)\n\n    data := strings.NewReader(\"Hello World!\\n\")\n\n    teeReader := io.TeeReader(data, logs)\n\n    // logs will also receives contents from teeReader\n    io.Copy(os.Stdout, teeReader)\n\n    fmt.Println(\"Content of logs:\", logs.String())\n}","markups":[],"codeBlockMetadata":{"mode":1,"lang":"go"}},{"name":"cf09","type":1,"text":"run in Playground","markups":[{"type":3,"start":0,"end":17,"href":"https://go.dev/play/p/tJmeNhcrSXt","title":"","rel":"","anchorType":0}]},{"name":"57cd","type":1,"text":"The behavior of the TeeReader is exactly like the tee command from Linux, named after the T-splitter used in plumbing:","markups":[{"type":3,"start":50,"end":53,"href":"https://www.geeksforgeeks.org/tee-command-linux-example/","title":"","rel":"","anchorType":0}]},{"name":"9266","type":4,"text":"","markups":[],"layout":1,"metadata":{"id":"1*9EqehxF0ndL0YFlFVTqGqQ.jpeg","originalWidth":400,"originalHeight":400}},{"name":"8778","type":3,"text":"io.Pipe","markups":[]},{"name":"37af","type":4,"text":"","markups":[],"layout":1,"metadata":{"id":"1*41tmv3iHYKLioseW8TgUJw.png","originalWidth":249,"originalHeight":64}},{"name":"a233","type":1,"text":"Speaking of Linux and plumbing, you might be familiar with the pipe operator, which combines two or more commands so that the output of one becomes the input of the other.","markups":[{"type":3,"start":63,"end":76,"href":"https://www.geeksforgeeks.org/piping-in-unix-or-linux/","title":"","rel":"","anchorType":0}]},{"name":"3a3d","type":8,"text":"echo hello | tr l y","markups":[],"codeBlockMetadata":{"mode":1,"lang":"bash"}},{"name":"fcbc","type":1,"text":"This outputs:","markups":[]},{"name":"c15d","type":8,"text":"heyyo","markups":[],"codeBlockMetadata":{"mode":2,"lang":"bash"}},{"name":"64f3","type":1,"text":"I like the pipe's universality. It doesn't matter what programs you connect as long as one writes and the other reads. I could have just as easily used cat to fetch the contents of a file instead of echo:","markups":[{"type":10,"start":152,"end":155},{"type":10,"start":199,"end":203}]},{"name":"4471","type":8,"text":"cat file | tr l y","markups":[],"codeBlockMetadata":{"mode":1,"lang":"bash"}},{"name":"441c","type":1,"text":"In Go, we achieve this behavior with io.Pipe that can be used to connect code expecting an io.Reader with code expecting an io.Writer.","markups":[{"type":3,"start":37,"end":44,"href":"https://pkg.go.dev/io#Pipe","title":"","rel":"","anchorType":0}]},{"name":"6a5f","type":1,"text":"Let's try to replicate the same echo hello | tr l y example to see how that works:","markups":[{"type":10,"start":32,"end":51}]},{"name":"c053","type":8,"text":"package main\n\nimport (\n    \"fmt\"\n    \"io\"\n    \"strings\"\n)\n\nfunc main() {\n    pipeReader, pipeWriter := io.Pipe()\n\n    echo(pipeWriter, \"hello\")\n    tr(pipeReader, \"e\", \"i\")\n}\n\nfunc echo(w io.Writer, s string) {\n    fmt.Fprint(w, s)\n}\n\nfunc tr(r io.Reader, old string, new string) {\n    data, _ := io.ReadAll(r)\n    res := strings.Replace(string(data), old, new, -1)\n    fmt.Println(res)\n}\n","markups":[],"codeBlockMetadata":{"mode":1,"lang":"go"}},{"name":"18c8","type":1,"text":"run in Playground","markups":[{"type":3,"start":0,"end":17,"href":"https://go.dev/play/p/df0TKZUtuoX","title":"","rel":"","anchorType":0}]},{"name":"9ca2","type":1,"text":"Running this program, we get an error:","markups":[]},{"name":"cea4","type":8,"text":"fatal error: all goroutines are asleep - deadlock!","markups":[],"codeBlockMetadata":{"mode":1,"lang":"sql"}},{"name":"06e0","type":1,"text":"To understand why, we need to read the documentation of the io.Pipe function:","markups":[{"type":10,"start":60,"end":67}]},{"name":"b6da","type":8,"text":"// Pipe creates a synchronous in-memory pipe.\n// That is, each Write to the [PipeWriter] blocks until it has satisfied\n// one or more Reads from the [PipeReader] that fully consume\n// the written data.","markups":[],"codeBlockMetadata":{"mode":1,"lang":"cpp"}},{"name":"8776","type":1,"text":"Our code is not synchronous but sequential: we call echo and then tr. We get a deadlock when we try to write because no reading is happening.","markups":[{"type":10,"start":52,"end":56},{"type":10,"start":66,"end":68}]},{"name":"b470","type":1,"text":"Let's fix that:","markups":[]},{"name":"1e9e","type":8,"text":"package main\n\nimport (\n    \"fmt\"\n    \"io\"\n    \"strings\"\n)\n\nfunc main() {\n    pipeReader, pipeWriter := io.Pipe()\n\n    // Run echo concurrently with tr in a separate goroutine\n    go echo(pipeWriter, \"hello\")\n    tr(pipeReader, \"e\", \"i\")\n}\n\nfunc echo(w io.Writer, s string) {\n    fmt.Fprint(w, s)\n}\n\nfunc tr(r io.Reader, old string, new string) {\n    data, _ := io.ReadAll(r)\n    res := strings.Replace(string(data), old, new, -1)\n    fmt.Println(res)\n}","markups":[],"codeBlockMetadata":{"mode":1,"lang":"go"}},{"name":"9574","type":1,"text":"run in Playground","markups":[{"type":3,"start":0,"end":17,"href":"https://go.dev/play/p/vA-6oIxJJv9","title":"","rel":"","anchorType":0}]},{"name":"0d2e","type":1,"text":"Running the modified program gives us the same error:","markups":[]},{"name":"00e9","type":8,"text":"fatal error: all goroutines are asleep - deadlock!","markups":[],"codeBlockMetadata":{"mode":2,"lang":"shell"}},{"name":"7801","type":1,"text":"Why is that? Let's check the PipeReader documentation on the Read method:","markups":[{"type":10,"start":29,"end":39}]},{"name":"4b7a","type":8,"text":"// Read implements the standard Read interface:\n// it reads data from the pipe, blocking until a writer\n// arrives or the write end is closed.\n// If the write end is closed with an error, that error is\n// returned as err; otherwise err is EOF.\nfunc (r *PipeReader) Read(data []byte) (n int, err error) {\n    return r.pipe.read(data)\n}","markups":[],"codeBlockMetadata":{"mode":1,"lang":"go"}},{"name":"025c","type":1,"text":"The second part of this sentence is key: blocking until a writer arrives or the write-end is closed.","markups":[{"type":1,"start":89,"end":99}]},{"name":"8605","type":1,"text":"The read is still blocked because the writer is not closed after writing our data. Let's fix that by calling Close() on the pipeWriter:","markups":[{"type":10,"start":109,"end":116},{"type":10,"start":124,"end":134}]},{"name":"9eed","type":8,"text":"package main\n\nimport (\n    \"fmt\"\n    \"io\"\n    \"strings\"\n)\n\nfunc main() {\n    pipeReader, pipeWriter := io.Pipe()\n\n    go func() {\n       echo(pipeWriter, \"hello\")\n       // we close the writer so we unblock the reader\n       pipeWriter.Close()\n    }()\n    tr(pipeReader, \"e\", \"i\")\n}\n\nfunc echo(w io.Writer, s string) {\n    fmt.Fprint(w, s)\n}\n\nfunc tr(r io.Reader, old string, new string) {\n    data, _ := io.ReadAll(r)\n    res := strings.Replace(string(data), old, new, -1)\n    fmt.Println(res)\n}","markups":[],"codeBlockMetadata":{"mode":1,"lang":"go"}},{"name":"be0d","type":1,"text":"run in Playground","markups":[{"type":3,"start":0,"end":17,"href":"https://go.dev/play/p/ngjj4_bMt0h","title":"","rel":"","anchorType":0}]},{"name":"4c80","type":13,"text":"Conclusion","markups":[]},{"name":"893a","type":1,"text":"That was all for today! I hope you found this post helpful and that you now have a couple more functions under your belt.","markups":[]},{"name":"ec66","type":1,"text":"Covered functions:","markups":[{"type":1,"start":0,"end":18}]},{"name":"dae9","type":1,"text":"io.LimitReader\nio.MultiReader\nio.MultiWriter\nio.TeeReader\nio.Pipe","markups":[{"type":3,"start":0,"end":14,"href":"https://pkg.go.dev/io#LimitReader","title":"","rel":"","anchorType":0},{"type":3,"start":15,"end":29,"href":"https://pkg.go.dev/io#MultiReader","title":"","rel":"","anchorType":0},{"type":3,"start":30,"end":44,"href":"https://pkg.go.dev/io#MultiWriter","title":"","rel":"","anchorType":0},{"type":3,"start":45,"end":57,"href":"https://pkg.go.dev/io#TeeReader","title":"","rel":"","anchorType":0},{"type":3,"start":58,"end":65,"href":"https://pkg.go.dev/io#Pipe","title":"","rel":"","anchorType":0}]},{"name":"1275","type":1,"text":"If you enjoyed this article, I would appreciate a clap or share!","markups":[]},{"name":"2862","type":1,"text":"Do you have any questions? Connect with me on LinkedIn, and I'll be happy to help!","markups":[{"type":3,"start":46,"end":54,"href":"https://www.linkedin.com/in/andrei-boar/","title":"","rel":"","anchorType":0}]}],"sections":[{"name":"8fda","startIndex":0}]},"postDisplay":{"coverless":true}},"virtuals":{"allowNotes":true,"previewImage":{"imageId":"1*WPw5kYw_1aq8d1qiVW0uRg.png","filter":"","backgroundSize":"","originalWidth":257,"originalHeight":244,"strategy":"resample","height":0,"width":0},"wordCount":1244,"imageCount":6,"readingTime":5.6443396226415095,"subtitle":"It's time to continue exploring the fundamentals of I/O in Go.","usersBySocialRecommends":[],"noIndex":false,"recommends":4,"isBookmarked":false,"tags":[{"slug":"golang","name":"Golang","postCount":23024,"metadata":{"postCount":23024,"coverImage":{"id":"1*NgGSNyQJ2S1H6AhU-oV2vQ.jpeg","originalWidth":611,"originalHeight":272,"isFeatured":true}},"type":"Tag"},{"slug":"input-output","name":"Input Output","postCount":312,"metadata":{"postCount":312,"coverImage":{"id":"1*WPw5kYw_1aq8d1qiVW0uRg.png","originalWidth":257,"originalHeight":244,"isFeatured":true}},"type":"Tag"},{"slug":"golang-tutorial","name":"Golang Tutorial","postCount":2388,"metadata":{"postCount":2388,"coverImage":{"id":"1*fN5nD3xOhdp2t7TwoW1l8w.gif","originalWidth":576,"originalHeight":576,"isFeatured":true}},"type":"Tag"},{"slug":"software-development","name":"Software Development","postCount":280480,"metadata":{"postCount":280480,"coverImage":{"id":"0*zL_D6sfeK7a8aZ-L","originalWidth":1000,"originalHeight":1500,"isFeatured":true}},"type":"Tag"},{"slug":"programming","name":"Programming","postCount":396755,"metadata":{"postCount":396755,"coverImage":{"id":"0*zL_D6sfeK7a8aZ-L","originalWidth":1000,"originalHeight":1500,"isFeatured":true}},"type":"Tag"}],"socialRecommendsCount":0,"responsesCreatedCount":0,"links":{"entries":[{"url":"https://www.linkedin.com/in/andrei-boar/","alts":[],"httpStatus":999},{"url":"https://go.dev/play/p/vA-6oIxJJv9","alts":[],"httpStatus":200},{"url":"https://pkg.go.dev/io#LimitReader","alts":[],"httpStatus":200},{"url":"https://pkg.go.dev/io#MultiWriter","alts":[],"httpStatus":200},{"url":"https://go.dev/play/p/tJmeNhcrSXt","alts":[],"httpStatus":200},{"url":"https://go.dev/play/p/df0TKZUtuoX","alts":[],"httpStatus":200},{"url":"https://pkg.go.dev/io#MultiReader","alts":[],"httpStatus":200},{"url":"https://go.dev/play/p/pgGn2NO95Qc","alts":[],"httpStatus":200},{"url":"https://www.geeksforgeeks.org/piping-in-unix-or-linux/","alts":[{"type":1,"url":"https://cdn.ampproject.org/c/s/www.geeksforgeeks.org/piping-in-unix-or-linux/amp/"}],"httpStatus":200},{"url":"https://github.com/zuzuleinen/downloader/blob/main/downloader/downloader.go#L118","alts":[],"httpStatus":200},{"url":"https://pkg.go.dev/io#Pipe","alts":[],"httpStatus":200},{"url":"https://go.dev/play/p/qrXFNukv11n","alts":[],"httpStatus":200},{"url":"https://www.geeksforgeeks.org/tee-command-linux-example/","alts":[{"type":1,"url":"https://cdn.ampproject.org/c/s/www.geeksforgeeks.org/tee-command-linux-example/amp/"}],"httpStatus":200},{"url":"https://medium.com/@andreiboar/fundamentals-of-i-o-in-go-c893d3714deb","alts":[{"type":3,"url":"medium://p/c893d3714deb"},{"type":2,"url":"medium://p/c893d3714deb"}],"httpStatus":200},{"url":"https://go.dev/play/p/1GYziqBeupc","alts":[],"httpStatus":200},{"url":"https://go.dev/play/p/ngjj4_bMt0h","alts":[],"httpStatus":200},{"url":"https://pkg.go.dev/io#TeeReader","alts":[],"httpStatus":200}],"version":"0.3","generatedAt":1712763805166},"isLockedPreviewOnly":false,"metaDescription":"","totalClapCount":55,"sectionCount":1,"readingList":0,"topics":[{"topicId":"decb52b64abf","slug":"programming","createdAt":1493934116328,"deletedAt":0,"image":{"id":"1*iPa136b1cGEO7lvoXg6uHQ@2x.jpeg","originalWidth":6016,"originalHeight":4016},"name":"Programming","description":"The good, the bad, the buggy.","relatedTopics":[],"visibility":1,"relatedTags":[],"relatedTopicIds":[],"seoTitle":"Programming News and Articles — Medium","type":"Topic"}]},"coverless":true,"slug":"fundamentals-of-i-o-in-go-part-2","translationSourcePostId":"","translationSourceCreatorId":"","isApprovedTranslation":false,"inResponseToPostId":"","inResponseToRemovedAt":0,"isTitleSynthesized":true,"allowResponses":true,"importedUrl":"","importedPublishedAt":0,"visibility":0,"uniqueSlug":"fundamentals-of-i-o-in-go-part-2-e7bb68cd5608","previewContent":{"bodyModel":{"paragraphs":[{"name":"previewImage","type":4,"text":"","layout":10,"metadata":{"id":"1*WPw5kYw_1aq8d1qiVW0uRg.png","originalWidth":257,"originalHeight":244,"isFeatured":true}},{"name":"3f00","type":3,"text":"Fundamentals of I/O in Go: Part 2","markups":[],"alignment":1},{"name":"93e4","type":1,"text":"It's time to continue exploring the fundamentals of I/O in Go.","markups":[],"alignment":1}],"sections":[{"startIndex":0}]},"isFullContent":false,"subtitle":"It's time to continue exploring the fundamentals of I/O in Go."},"license":0,"inResponseToMediaResourceId":"","canonicalUrl":"https://medium.com/@andreiboar/fundamentals-of-i-o-in-go-part-2-e7bb68cd5608","approvedHomeCollectionId":"","isNewsletter":false,"newsletterId":"","webCanonicalUrl":"https://andreiboar.com/posts/fundamentals-of-io-part-two/","mediumUrl":"https://medium.com/@andreiboar/fundamentals-of-i-o-in-go-part-2-e7bb68cd5608","migrationId":"","notifyFollowers":true,"notifyTwitter":false,"notifyFacebook":false,"responseHiddenOnParentPostAt":0,"isSeries":false,"isSubscriptionLocked":false,"seriesLastAppendedAt":0,"audioVersionDurationSec":0,"sequenceId":"","isEligibleForRevenue":false,"isBlockedFromHightower":false,"deletedAt":0,"lockedPostSource":0,"hightowerMinimumGuaranteeStartsAt":0,"hightowerMinimumGuaranteeEndsAt":0,"featureLockRequestAcceptedAt":0,"mongerRequestType":1,"layerCake":0,"socialTitle":"","socialDek":"","editorialPreviewTitle":"","editorialPreviewDek":"","curationEligibleAt":0,"isProxyPost":false,"proxyPostFaviconUrl":"","proxyPostProviderName":"","proxyPostType":0,"isSuspended":false,"isLimitedState":false,"seoTitle":"","previewContent2":{"bodyModel":{"paragraphs":[{"name":"3f00","type":3,"text":"Fundamentals of I/O in Go: Part 2","markups":[]},{"name":"93e4","type":1,"text":"It's time to continue exploring the fundamentals of I/O in Go.","markups":[]},{"name":"7194","type":1,"text":"If you’re not familiar with io.Reader and io.Writer in Go, read my first article, especially the part where I said that a Reader is something we can read from, and a Writer is something we can write to.","markups":[{"type":3,"start":64,"end":80,"href":"https://medium.com/@andreiboar/fundamentals-of-i-o-in-go-c893d3714deb","title":"","rel":"","anchorType":0}]},{"name":"41c8","type":1,"text":"Let's…","markups":[]}],"sections":[{"name":"8fda","startIndex":0}]},"isFullContent":false,"subtitle":"It's time to continue exploring the fundamentals of I/O in Go."},"cardType":0,"isDistributionAlertDismissed":false,"isShortform":false,"shortformType":0,"responsesLocked":false,"isLockedResponse":false,"isPublishToEmail":false,"responseDistribution":0,"isMarkedPaywallOnly":false,"type":"Post"},"mentionedUsers":[],"collaborators":[],"hideMeter":false,"collectionUserRelations":[],"mode":null,"references":{"User":{"85628b4ce9c1":{"userId":"85628b4ce9c1","name":"Andrei Boar","username":"andreiboar","createdAt":1403449197754,"imageId":"1*EfMlhyrCKTdw7Bapk2iy6g.jpeg","backgroundImageId":"","bio":"Go Software Engineer based in Cluj-Napoca https://www.linkedin.com/in/andrei-boar/","twitterScreenName":"zuzuleinen","socialStats":{"userId":"85628b4ce9c1","usersFollowedCount":11,"usersFollowedByCount":22,"type":"SocialStats"},"social":{"userId":"lo_04663382abc1","targetUserId":"85628b4ce9c1","type":"Social"},"allowNotes":1,"mediumMemberAt":0,"isWriterProgramEnrolled":true,"isSuspended":false,"isMembershipTrialEligible":true,"facebookDisplayName":"Andrei Boar","optInToIceland":true,"hasCompletedProfile":false,"userDismissableFlags":[32,21,29,44,2],"hasSeenIcelandOnboarding":false,"postSubscribeMembershipUpsellShownAt":0,"languageCode":"en-us","type":"User"}},"Social":{"85628b4ce9c1":{"userId":"lo_04663382abc1","targetUserId":"85628b4ce9c1","type":"Social"}},"SocialStats":{"85628b4ce9c1":{"userId":"85628b4ce9c1","usersFollowedCount":11,"usersFollowedByCount":22,"type":"SocialStats"}}}},"v":3,"b":"20240411-1454-root"}